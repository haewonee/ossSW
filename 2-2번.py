# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dPHBPpPgfHe3Cm6s22vLRy11FxO63rG3
"""

import pandas as pd

# Google Drive 마운트
from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/Colab Notebooks/2019_kbo_for_kaggle_v2.csv'

df = pd.read_csv(file_path)

iff_2015 = df.loc[df['p_year'] == 2016]
top_H5 = iff_2015.sort_values(by='H', ascending=False).head(10)['batter_name']
top_avg5 = iff_2015.sort_values(by='avg', ascending=False).head(10)['batter_name']
top_HR5 = iff_2015.sort_values(by='HR', ascending=False).head(10)['batter_name']
top_OBP5 = iff_2015.sort_values(by='OBP', ascending=False).head(10)['batter_name']
print("2015년의 top10 선수들!!")
result_2015 = pd.DataFrame({
    '안타': top_H5.values,
    '타율': top_avg5.values,
    '홈런': top_HR5.values,
    '출루율': top_OBP5.values
})
print(result_2015)

print("\n")
iff_2016 = df.loc[df['p_year'] == 2017]
top_H6 = iff_2016.sort_values(by='H', ascending=False).head(10)['batter_name']
top_avg6 = iff_2016.sort_values(by='avg', ascending=False).head(10)['batter_name']
top_HR6 = iff_2016.sort_values(by='HR', ascending=False).head(10)['batter_name']
top_OBP6 = iff_2016.sort_values(by='OBP', ascending=False).head(10)['batter_name']
print("2016년의 top10 선수들!!")
result_2016 = pd.DataFrame({
    '안타': top_H6.values,
    '타율': top_avg6.values,
    '홈런': top_HR6.values,
    '출루율': top_OBP6.values
})
print(result_2016)
print("\n")
iff_2017 = df.loc[df['p_year'] == 2018]
top_H7 = iff_2017.sort_values(by='H', ascending=False).head(10)['batter_name']
top_avg7 = iff_2017.sort_values(by='avg', ascending=False).head(10)['batter_name']
top_HR7 = iff_2017.sort_values(by='HR', ascending=False).head(10)['batter_name']
top_OBP7 = iff_2017.sort_values(by='OBP', ascending=False).head(10)['batter_name']
print("2017년의 top10 선수들!!")
result_2017 = pd.DataFrame({
    '안타': top_H7.values,
    '타율': top_avg7.values,
    '홈런': top_HR7.values,
    '출루율': top_OBP7.values
})
print(result_2017)
print("\n")
iff_2018 = df.loc[df['p_year'] == 2019]
top_H8 = iff_2018.sort_values(by='H', ascending=False).head(10)['batter_name']
top_avg8 = iff_2018.sort_values(by='avg', ascending=False).head(10)['batter_name']
top_HR8 = iff_2018.sort_values(by='HR', ascending=False).head(10)['batter_name']
top_OBP8 = iff_2018.sort_values(by='OBP', ascending=False).head(10)['batter_name']
print("2018년의 top10 선수들!!")
result_2018 = pd.DataFrame({
    '안타': top_H8.values,
    '타율': top_avg8.values,
    '홈런': top_HR8.values,
    '출루율': top_OBP8.values
})
print(result_2018)
print("\n")


position_2018 = df.loc[df['p_year'] == 2019]

result2 = [
    {'포지션': '포수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '포수'].loc[position_2018[position_2018['cp'] == '포수']['war'].idxmax()]['batter_name']},
    {'포지션': '1루수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '1루수'].loc[position_2018[position_2018['cp'] == '1루수']['war'].idxmax()]['batter_name']},
    {'포지션': '2루수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '2루수'].loc[position_2018[position_2018['cp'] == '2루수']['war'].idxmax()]['batter_name']},
    {'포지션': '3루수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '3루수'].loc[position_2018[position_2018['cp'] == '3루수']['war'].idxmax()]['batter_name']},
    {'포지션': '유격수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '유격수'].loc[position_2018[position_2018['cp'] == '유격수']['war'].idxmax()]['batter_name']},
    {'포지션': '좌익수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '좌익수'].loc[position_2018[position_2018['cp'] == '좌익수']['war'].idxmax()]['batter_name']},
    {'포지션': '중견수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '중견수'].loc[position_2018[position_2018['cp'] == '중견수']['war'].idxmax()]['batter_name']},
    {'포지션': '우익수', '최고의 승리기여도 선수': position_2018[position_2018['cp'] == '우익수'].loc[position_2018[position_2018['cp'] == '우익수']['war'].idxmax()]['batter_name']}
]

result22 = pd.DataFrame(result2)
print(result22)
print("\n")

columnn = ['R', 'H', 'HR', 'RBI', 'SB', 'war', 'avg', 'OBP', 'SLG', 'salary']
dfcolumn = df[columnn]

corre = dfcolumn.corr()

sacje = corre.loc['salary'].drop('salary')
big_sanggan = sacje.idxmax()

print("연봉 가장 큰 상관관계를 가지는 것은 ?")
print(big_sanggan)